import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Kevin Ravakhah
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        XMLTree title = channel.child(getChildElement(channel, "title"));
        XMLTree description = channel
                .child(getChildElement(channel, "description"));
        XMLTree link = channel.child(getChildElement(channel, "link")).child(0);
        String table = "<table border=\"1\">" + "\n<tr>" + "\n<th>Date</th>"
                + "\n<th>Source</th>" + "\n<th>News</th>" + "\n</tr>";

        if (title.numberOfChildren() > 0) {
            out.println(
                    "<html> <head> <title> " + title.child(0) + " </title>");
        } else {
            out.println("<html> <head> <title> Empty Title </title>");
        }

        out.println("</head> <body>");

        if (title.numberOfChildren() > 0) {
            out.println("<h1><a href=\"" + link + "\">" + title.child(0)
                    + "</a></h1>");
        } else {
            out.println("<h1> Empty Title </ht>");
        }

        if (description.numberOfChildren() > 0) {
            out.println("<p>" + description + "</p>");
        } else {
            out.println("<p> No Description </p>");
        }

        out.println(table);
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("</table>");
        out.println("</body></html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        int index = -1;

        for (int i = 0; i < xml.numberOfChildren() && index == -1; i++) {
            if (xml.child(i).label().equals(tag)) {
                index = i;
            }
        }

        return index;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<tr>");

        if (getChildElement(item, "pubDate") != -1) {
            XMLTree date = item.child(getChildElement(item, "pubDate"))
                    .child(0);
            out.println("<td>" + date + "</td>");
        } else {
            out.println("<td>No date available</td>");
        }

        if (getChildElement(item, "source") != -1) {
            XMLTree source = item.child(getChildElement(item, "source"));
            if (source.numberOfChildren() > 0) {
                XMLTree sourceText = source.child(0);
                String url = source.attributeValue("url");
                out.println("<td><a href=\"" + url + "\">" + sourceText
                        + "</a></td>");
            }
        } else {
            out.println("<td>No source available</td>");
        }

        XMLTree link = item.child(getChildElement(item, "link")).child(0);

        // initialized boolean to make conditionals simpler
        boolean isTitleChildren = false;
        boolean isDescriptionChildren = false;

        // initialized XMLTree variables with link to avoid error
        XMLTree title = link;
        XMLTree description = link;

        // check to see if title exists and has children
        if (getChildElement(item, "title") != -1) {
            title = item.child(getChildElement(item, "title"));
            if (title.numberOfChildren() > 0) {
                isTitleChildren = true;
            }
        }

        // check to see if description exists and has children
        if (getChildElement(item, "description") != -1) {
            description = item.child(getChildElement(item, "description"));
            if (description.numberOfChildren() > 0) {
                isDescriptionChildren = true;
            }
        }

        // output data
        if (isTitleChildren) {
            out.println("<td><a href=\"" + link + "\">" + title.child(0)
                    + "</a></td>");
        } else if (isDescriptionChildren) {
            out.println("<td><a href=\"" + link + "\">" + description.child(0)
                    + "</a></td>");
        } else {
            out.println("<td>No title available</td>");
        }

        out.println("</tr>");
    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {
        XMLTree xml = new XMLTree1(url);
        SimpleWriter fileOut = new SimpleWriter1L(file);

        if (xml.label() == "rss" && xml.hasAttribute("version")) {
            if (xml.attributeValue("version").equals("2.0")) {
                XMLTree channel = xml.child(0);
                XMLTree item = channel.child(getChildElement(channel, "item"));
                outputHeader(channel, fileOut);
                for (int i = 0; i < channel.numberOfChildren(); i++) {
                    if (channel.child(i).label() == "item") {
                        processItem(channel.child(i), fileOut);
                    }
                }
                outputFooter(fileOut);
                out.println("Processed XML file");
            }
        } else {
            out.println("XML file not RSS version 2.0");
        }

        fileOut.close();
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter consoleOut = new SimpleWriter1L();

        consoleOut.print("Enter an XML file with RSS v2.0 feeds: ");
        String url = in.nextLine();

        consoleOut.print("Enter output file name: ");
        String file = in.nextLine();

        SimpleWriter fileOut = new SimpleWriter1L(file);
        XMLTree feeds = new XMLTree1(url);

        // output header
        fileOut.println("<html> <head> <title> " + feeds.attributeValue("title")
                + " </title>");
        fileOut.println(
                "<body> <h2> " + feeds.attributeValue("title") + "</h2> <ul>");

        // initialize strings to make output simpler
        String feedName = "";
        String feedFile = "";
        String feedLink = "";

        // loop through feed children and print info
        for (int i = 0; i < feeds.numberOfChildren(); i++) {
            feedName = feeds.child(i).attributeValue("name");
            feedFile = feeds.child(i).attributeValue("file");
            feedLink = feeds.child(i).attributeValue("url");
            fileOut.println("<li><a href=\"" + feedFile + "\">" + feedName
                    + "</a></li>");
            processFeed(feedLink, feedFile, consoleOut);
        }

        // output footer
        fileOut.println("</ul> </body> </html>");

        consoleOut.println("Done");

        in.close();
        consoleOut.close();
        fileOut.close();
    }

}
